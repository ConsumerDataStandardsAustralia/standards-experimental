{
    "openapi": "3.0.3",
    "info": {
        "contact": {
            "email": "contact@consumerdatastandards.gov.au",
            "name": "Consumer Data Standards",
            "url": "https://consumerdatastandards.gov.au"
        },
        "description": "Specification of endpoints defined in the Simple Payments experimental standard.  This is an experimental standard created by the Data Standards Body (DSB) as part of the Consumer Data Standards",
        "license": {
            "name": "MIT License",
            "url": "https://opensource.org/licenses/MIT"
        },
        "title": "CDR Experimantal Simple Payments API",
        "version": "0.0.1"
    },
    "servers": [
        {
            "url": "https://data.holder.com.au/cds-au/v1"
        }
    ],
    "paths": {
        "/DSB/banking/payments": {
            "summary": "Post Payment Instruction",
            "x-version": "1",
            "post": {
                "description": "Submit a payment instruction on behalf of a consumer.",
                "operationId": "postPaymentInstruction",
                "tags": [
                    "Banking",
                    "Payments"
                ],
                "parameters": [
                    {
                        "$ref": "#/components/parameters/x-v"
                    },
                    {
                        "$ref": "#/components/parameters/x-min-v"
                    }
                ],
                "requestBody": {
                    "description": "Payment instruction to submit for execution",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PostPaymentInstructionRequestV1"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PostPaymentInstructionResponseV1"
                                }
                            }
                        },
                        "description": "Successful response",
                        "headers": {
                            "x-v": {
                                "$ref": "#/components/headers/x-v"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseErrorListV2"
                                }
                            }
                        },
                        "description": "The following error codes MUST be supported:<br/><ul class=\"error-code-list\"><li>[400 - Invalid Field](#error-400-field-invalid)</li><li>[400 - Missing Field](#error-400-field-missing)</li><li>[400 - Invalid Page Size](#error-400-field-invalid-page-size)</li><li>[400 - Invalid Version](#error-400-header-invalid-version)</li></ul>"
                    },
                    "406": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseErrorListV2"
                                }
                            }
                        },
                        "description": "The following error codes MUST be supported:<br/><ul class=\"error-code-list\"><li>[406 - Unsupported Version](#error-406-header-unsupported-version)</li></ul>"
                    }
                }
            }
        }
    },
    "components": {
        "headers": {
            "x-v": {
                "schema": {
                    "description": "The [version](#response-headers) of the API end point that the data holder has responded with.",
                    "type": "string"
                }
            }
        },
        "parameters": {
            "x-v": {
                "name": "x-v",
                "description": "Version of the API end point requested by the client. Must be set to a positive integer. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If the value of [x-min-v](#request-headers) is equal to or higher than the value of [x-v](#request-headers) then the [x-min-v](#request-headers) header should be treated as absent. If all versions requested are not supported then the data holder must respond with a 406 Not Acceptable. See [HTTP Headers](#request-headers)",
                "in": "header",
                "required": true,
                "schema": {
                    "type": "string"
                }
            },
            "x-min-v": {
                "name": "x-min-v",
                "description": "Minimum version of the API end point requested by the client. Must be set to a positive integer if provided. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If all versions requested are not supported then the data holder must respond with a 406 Not Acceptable.",
                "in": "header",
                "required": false,
                "schema": {
                    "type": "string"
                }
            }
        },
        "responses": {},
        "schemas": {
            "PostPaymentInstructionRequestV1": {
                "required": [
                    "data",
                    "meta"
                ],
                "type": "object",
                "properties": {
                    "data": {
                        "required": [
                            "to",
                            "from",
                            "instruction"
                        ],
                        "type": "object",
                        "properties": {
                            "to": {
                                "type": "object",
                                "required": [
                                    "toUType"
                                ],
                                "x-conditional": [
                                    "accountId"
                                ],
                                "properties": {
                                    "toUType": {
                                        "type": "string",
                                        "description": "Indicates the type of object used to define the destination account for the payment",
                                        "enum": [
                                            "accountId"
                                        ]
                                    },
                                    "accountId": {
                                        "type": "string",
                                        "description": "The ID of the destination account previous obtained from a CDR account endpoint call for this consumer. Mandatory if toUType is set to `accountId`"
                                    }
                                }
                            },
                            "from": {
                                "type": "object",
                                "required": [
                                    "fromUType"
                                ],
                                "x-conditional": [
                                    "accountId"
                                ],
                                "properties": {
                                    "toUType": {
                                        "type": "string",
                                        "description": "Indicates the type of object used to define the source account for the payment",
                                        "enum": [
                                            "accountId"
                                        ]
                                    },
                                    "accountId": {
                                        "type": "string",
                                        "description": "The ID of the source account previous obtained from a CDR account endpoint call for this consumer. Mandatory if fromUType is set to `accountId`"
                                    }
                                }
                            },
                            "instruction": {
                                "type": "object",
                                "required": [
                                    "amount"
                                ],
                                "properties": {
                                    "amount": {
                                        "type": "string",
                                        "description": "The amount to be paid",
                                        "x-cds-type": "AmountString"
                                    },
                                    "currency": {
                                        "type": "string",
                                        "description": "The currency the payment will be made in.  Assumes AUD if absent",
                                        "x-cds-type": "CurrencyString"
                                    }
                                }
                            }
                        }
                    },
                    "meta": {
                        "$ref": "#/components/schemas/Meta"
                    }
                }
            },
            "PostPaymentInstructionResponseV1": {
                "required": [
                    "data",
                    "links",
                    "meta"
                ],
                "type": "object",
                "properties": {
                    "data": {
                        "required": [
                            "paymentStatus"
                        ],
                        "x-conditional": [
                            "rejectionReason"
                        ],
                        "type": "object",
                        "properties": {
                            "paymentStatus": {
                                "type": "string",
                                "description": "Status of the payment instruction.  Values are:\n* PENDING - The payment is staged but will be processed asynchronously\n* AUTHORISATION_REQUIRED - Manual authorisation is required before processing can occur\n* PAID - The payment has been successfully processed\n* REJECTED - The payment has been rejected (see `rejectionReason` for more detail)",
                                "enum": [
                                    "PENDING",
                                    "AUTHORISATION_REQUIRED",
                                    "PAID",
                                    "REJECTED"
                                ]
                            },
                            "transactionId": {
                                "type": "string",
                                "description": "If the paymentStatus is `PAID` then this field may optionally contain an ID of the transaction that can be used to call the CDR Get Transaction Detail endpoint"
                            },
                            "rejectionReason": {
                                "type": "string",
                                "description": "Mandatory if `paymentStatus` is set to `REJECTED`.  Values are:\n* LIMIT - A payment limit has been encountered that prevents this payment\n* TO_ACCOUNT - The to account is invalid\n* FROM_ACCOUNT - The from account is invalid\n* BALANCE - Insufficient balance to complete the payment\n* NOT_SUPPORTED_TO - The payment type is not supported by the source account\n* NOT_SUPPORTED_FROM - The payment type is not supported by the destination account\n* UNDISCLOSED - The payment failed for an undisclosed reason",
                                "enum": [
                                    "LIMIT",
                                    "TO_ACCOUNT",
                                    "FROM_ACCOUNT",
                                    "BALANCE",
                                    "NOT_SUPPORTED",
                                    "UNDISCLOSED"
                                ]
                            }
                        }
                    },
                    "links": {
                        "$ref": "#/components/schemas/Links"
                    },
                    "meta": {
                        "$ref": "#/components/schemas/Meta"
                    }
                }
            },
            "ResponseErrorListV2": {
                "required": [
                    "errors"
                ],
                "type": "object",
                "properties": {
                    "errors": {
                        "type": "array",
                        "description": "",
                        "items": {
                            "required": [
                                "code",
                                "detail",
                                "title"
                            ],
                            "type": "object",
                            "properties": {
                                "code": {
                                    "type": "string",
                                    "description": "The code of the error encountered. Where the error is specific to the respondent, an application-specific error code, expressed as a string value. If the error is application-specific, the URN code that the specific error extends must be provided in the meta object. Otherwise, the value is the error code URN."
                                },
                                "title": {
                                    "type": "string",
                                    "description": "A short, human-readable summary of the problem that MUST NOT change from occurrence to occurrence of the problem represented by the error code."
                                },
                                "detail": {
                                    "type": "string",
                                    "description": "A human-readable explanation specific to this occurrence of the problem."
                                },
                                "meta": {
                                    "$ref": "#/components/schemas/MetaError"
                                }
                            }
                        }
                    }
                },
                "x-conditional": [
                    "meta"
                ]
            },
            "Links": {
                "properties": {
                    "self": {
                        "description": "Fully qualified link that generated the current response document",
                        "type": "string",
                        "x-cds-type": "URIString"
                    }
                },
                "required": [
                    "self"
                ],
                "type": "object"
            },
            "Meta": {
                "type": "object"
            },
            "MetaError": {
                "type": "object",
                "properties": {
                    "urn": {
                        "type": "string",
                        "description": "The CDR error code URN which the application-specific error code extends. Mandatory if the error `code` is an application-specific error rather than a standardised error code."
                    }
                },
                "description": "Additional data for customised error codes",
                "x-conditional": [
                    "urn"
                ]
            }
        }
    }
}